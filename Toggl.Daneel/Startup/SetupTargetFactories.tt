﻿<#@ template language="C#" hostspecific="True"
#><#@ assembly name="System.Core"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Linq"
#>using MvvmCross.Binding.Bindings.Target.Construction;
using MvvmCross.iOS.Platform;
using Toggl.Daneel.Binding;
using UIKit;
using Toggl.Daneel.Views;
using System.Collections.Generic;
using MvvmCross.Binding.iOS.Views;

namespace Toggl.Daneel
{
    public partial class Setup : MvxIosSetup
    {
        protected override void FillTargetFactories(IMvxTargetBindingFactoryRegistry registry)
        {
            base.FillTargetFactories(registry);
<#
    var filePath = Path.GetDirectoryName(Host.TemplateFile);
    var targetBindingFolder = Path.Combine(filePath, "../Binding/" );
    var files = Directory.GetFiles(targetBindingFolder, "*.cs");
    var isFirstClass = true;

    foreach(var file in files)
    {  
        var className = Path.GetFileName(file).Replace(".cs", ""); 
        var lines = File.ReadAllLines(file);

        var declarationLine = lines.FirstOrDefault(line => line.Contains("TargetBinding<"));
        if (declarationLine == null) continue;

        var beginAt = declarationLine.IndexOf("<") + 1;
        var endAt = declarationLine.IndexOf(", ");
        if (endAt < 0)
            endAt = declarationLine.IndexOf(">");

        var length = endAt - beginAt;
        var viewName = declarationLine.Substring(beginAt, length);

        var bindingLine = lines.FirstOrDefault(line => line.Contains("const string BindingName"));
        if (bindingLine == null) continue;

        var bindingName = bindingLine
            .Split(' ')
            .Last()
            .Replace(@"""", "")
            .Replace(@";", "");

        WriteLine("");
        WriteLine($"            registry.RegisterCustomBindingFactory<{viewName}>(");
        WriteLine($"                {className}.BindingName,");
        WriteLine($"                view => new {className}(view)");
        WriteLine($"            );");
    }
#>        }
    }
}
